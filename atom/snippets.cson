# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#

# CSS
'.source.css, .source.scss, .source.sass':
  '@import':
    'prefix': 'import'
    'body': '@import \'$0\';'
    'description': 'Import style rules from other style sheets.'
    'descriptionMoreURL': 'https://developer.mozilla.org/en-US/docs/Web/CSS/@import'

  '@charset':
    'prefix': 'charset'
    'body': '@charset \'${1:UTF-8}\';$0'
    'description': 'Specifies the character encoding used in the style sheet.'
    'descriptionMoreURL': 'https://developer.mozilla.org/en-US/docs/Web/CSS/@charset'

  '@define: Component':
    'prefix': 'def'
    'body': '/** @define ${1:ComponentName} */${0}'

  '@define: utilities':
    'prefix': '@defu'
    'body': '/** @define utilities */${0}'

  '@media':
    'prefix': 'med'
    'body': """
      @media screen and (min-width: $1) {
        $2
      }
    """
    'description': 'Associates a set of nested statements, in a CSS block that is delimited by curly braces, with a condition defined by a media query.'
    'descriptionMoreURL': 'https://developer.mozilla.org/en-US/docs/Web/CSS/@media'

# Comments
'.source.css, .source.js':
  'Comment Section':
    'prefix': 'cs'
    'body': """
      /* ${1:Section comment block}
         ======================================================================\
         ==== */
    """
  'Comment Block':
    'prefix': 'cb'
    'body': """
      /**
       * $1
       */
    """
  'Comment Footnote':
    'prefix': 'cf'
    'body': '/* ${1:1} */'

# JavaScript
'.source.js':
  'error':
    'prefix': 'error'
    'body': 'console.error(${1})${0}'
  'log':
    'prefix': 'log'
    'body': 'console.log(${1})${0}'
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\n\tcase ${2:expression}:\n\t\t$4\n\t\tbreak$5\n\tdefault:\n\t\t$3\n}'
  'export':
    'prefix': 'ex'
    'body': 'export ${1:member}\n$0'
  'export default':
    'prefix': 'exd'
    'body': 'export default ${1:member}\n$0'
  'import module':
    'prefix': 'im'
    'body': "import ${1:*} from '${2:module}'$0"
  'import module as':
    'prefix': 'ima'
    'body': "import ${1:*} as ${2:name} from '${3:module}'$0"
  'import module destructured':
    'prefix': 'imd'
    'body': "import {$1} from '${2:module}'$0"
  'jsdoc':
    'prefix': 'doc'
    'body': """
      /**
       * @module      $1
       * @extends     {$2}
       * @description $3
       */
    """
  'Jest Test Template':
    'prefix': 'jt'
    'body': """
      import ${1:Subject} from '../$1'

      let subject

      describe('$1', () => {
        beforeAll(() => {
          subject = new $1()
        })

        it('fails a test', () => {
          expect(subject).toBeUndefined()$0
        })
      })

    """


# Underscore Templates
'.text.html':
  'Underscore':
    'prefix': '_'
    'body': '<% $0 %>'

  'Underscore (interpolation)':
    'prefix': '_='
    'body': '<%= $0 %>'

  'Underscore (if)':
    'prefix': '_if'
    'body': """
      <% if (${1}) { %>
        ${0}
      <% } %>
    """

  'Underscore (if else)':
    'prefix': '_ife'
    'body': """
      <% if (${1}) { %>
        ${0}
      <% } else { %>
      <% } %>
    """

  'Underscore (else if)':
    'prefix': '_elsif'
    'body': '<% } else if (${1}) { %>${0}'

  'Underscore (else)':
    'prefix': '_else'
    'body': '<% } else { %>${0}'

  'Underscore (for in)':
    'prefix': '_forin'
    'body': '<% for (var ${1:i} in ${2:value}) { %>${0}'

  'Underscore (for of)':
    'prefix': '_forof'
    'body': '<% for (var ${1:item} in ${2:value}) { %>${0}'
